#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('youtube-converter-backend:server');
var http = require('http');
const Video = require('../models/video');
const connectDb = require('../utils/connect-db');
const ytd = require('../utils/ytd');
const dbClearer = require('../utils/db-clearer');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 * 60
 */

var server = http.createServer(app);

connectDb().then(() => {
  const io = require('socket.io')(server, { cors: { origin: '*' } });
  io.on("connection", socket => {
    const videoId = socket.handshake.query.videoId;
    console.log('[' + socket.id + '] ' + videoId + ' Connected');
    socket.join(videoId);
    socket.on('download-initiate', () => {
      //Check if a video entry is present
      Video.findOne({ videoId }, (err, data) => {
        if (err) {
          console.log(err);
          io.to(videoId).emit('download-error', { videoId, error: err });
        }
        //If not, create one entry, and start downloading
        if (!data) {
          new Video({
            videoId
          }).save((err2, data2) => {
            if (err2) {
              console.log(err);
              io.to(videoId).emit('download-error', { videoId, error: err });
            }
            if (data2) {
              ytd(videoId, videoId + ".mp3");
            }
          })
        } else { //if yes, respond with appropriate message based on status
          if (data.status) {
            io.to(videoId).emit('download-complete', { videoId, videoName: data.videoName });
          }
        }
      });
    });
    socket.on("disconnect", () => {
      console.log('[' + socket.id + '] ' + videoId + ' Disconnected');
    });
  });
  global.io = io;
  dbClearer();

}).catch(error => {
  process.exit(1);
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
console.log("App started on port " + port);


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
